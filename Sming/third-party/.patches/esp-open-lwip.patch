diff --git a/include/user_config.h b/include/user_config.h
index e69de29..3a85c8c 100644
--- a/include/user_config.h
+++ b/include/user_config.h
@@ -0,0 +1,39 @@
+#ifndef _USER_CONFIG_LWIP_
+#define _USER_CONFIG_LWIP_
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+typedef signed short        sint16_t;
+
+void *ets_bzero(void *block, size_t size);
+bool ets_post(uint32_t prio, ETSSignal sig, ETSParam par);
+void ets_task(ETSTask task, uint32_t prio, ETSEvent * queue, uint8 qlen);
+
+void system_pp_recycle_rx_pkt(void *eb);
+
+#ifndef MEMLEAK_DEBUG
+	extern void *pvPortMalloc( size_t xWantedSize );
+	extern void vPortFree( void *pv );
+	extern void *pvPortZalloc(size_t size);
+#else
+	extern void *pvPortMalloc(size_t xWantedSize, const char *file, uint32 line);
+	extern void *pvPortZalloc(size_t xWantedSize, const char *file, uint32 line);
+	extern void vPortFree(void *ptr, const char *file, uint32 line);
+
+	extern void pvPortFree(void *ptr);
+	extern void *vPortMalloc(size_t xWantedSize);
+#endif /*MEMLEAK_DEBUG*/
+
+
+	extern void *pvPortCalloc(unsigned int n, unsigned int count);
+	extern void *pvPortRealloc(void * p, size_t size);
+	extern size_t xPortGetFreeHeapSize(void);
+//	extern void prvHeapInit(void) ICACHE_FLASH_ATTR ;
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /*_USER_CONFIG_LWIP_*/
diff --git a/Makefile.open b/Makefile.open
index 1bc584f..5db5467 100644
--- a/Makefile.open
+++ b/Makefile.open
@@ -2,7 +2,9 @@ CC = xtensa-lx106-elf-gcc
 AR = xtensa-lx106-elf-ar
 DEFS = -DLWIP_OPEN_SRC -DPBUF_RSV_FOR_WLAN -DEBUF_LWIP -DICACHE_FLASH
 COPT = -Os
-CFLAGS = $(DEFS) $(COPT) -Iinclude -Wl,-EL -mlongcalls -mtext-section-literals $(CFLAGS_EXTRA)
+
+CFLAGS = $(DEFS) $(COPT) -Iinclude -I$(SDK_BASE)/include -Wl,-EL -mlongcalls -mtext-section-literals $(CFLAGS_EXTRA)
+
 # Install prefix of esp-open-sdk toolchain
 PREFIX = ~/toolchain/xtensa-lx106-elf
 
@@ -36,14 +38,26 @@ lwip/core/ipv4/ip.o \
 lwip/core/ipv4/ip_frag.o \
 lwip/netif/etharp.o \
 \
-lwip/app/dhcpserver.o \
-\
-espconn_dummy.o \
+lwip/app/dhcpserver.o
 
-LIB = liblwip_open.a
 
-all: $(LIB)
+ifneq ($(ENABLE_ESPCONN),1)
+    OBJS += espconn_dummy.o
+else
+    OBJS += lwip/app/espconn.o \
+lwip/app/espconn_tcp.o \
+lwip/app/espconn_udp.o \
+lwip/app/espconn_mdns.o \
+lwip/core/mdns.o
 
+endif
+
+LIB = $(USER_LIBDIR)liblwip_open.a
+ifeq ($(ENABLE_ESPCONN),1)
+    LIB = $(USER_LIBDIR)liblwip_full.a
+endif
+
+all: $(LIB)
 
 $(LIB): $(OBJS)
 	$(AR) rcs $@ $^
diff --git a/include/arch/cc.h b/include/arch/cc.h
index ff03b30..f755330 100644
--- a/include/arch/cc.h
+++ b/include/arch/cc.h
@@ -37,9 +37,27 @@
 //#include <string.h>
 #include "c_types.h"
 #include "ets_sys.h"
+
 #include "osapi.h"
+#include <stdarg.h>
+
 #define EFAULT 14
 
+//Extra symbols to avoid implicit declaration warnings
+extern void *ets_memset(void *s, int c, size_t n);
+extern void ets_memcpy(void*, const void*, uint32);
+
+extern size_t ets_strlen(const char *s);
+extern int os_printf_plus(const char *format, ...)  __attribute__ ((format (printf, 1, 2)));
+extern int ets_sprintf(char *str, const char *format, ...)  __attribute__ ((format (printf, 2, 3)));
+extern void ets_timer_arm_new(ETSTimer *ptimer, uint32_t milliseconds, bool repeat_flag, int isMstimer);
+extern void ets_timer_disarm(ETSTimer *a);
+extern void ets_timer_setfn(ETSTimer *t, ETSTimerFunc *pfunction, void *parg);
+extern uint32 r_rand(void);
+extern int ets_memcmp(const void *s1, const void *s2, size_t n);
+
+struct netif * eagle_lwip_getif(uint8 index);
+
 //#define LWIP_PROVIDE_ERRNO
 
 #if (1)
diff --git a/lwip/app/dhcpserver.c b/lwip/app/dhcpserver.c
index ddb5984..b7055c9 100644
--- a/lwip/app/dhcpserver.c
+++ b/lwip/app/dhcpserver.c
@@ -13,6 +13,8 @@
 
 #include "user_interface.h"
 
+extern int wifi_softap_set_station_info(uint8_t * chaddr, struct ip_addr *ip);
+
 #ifdef MEMLEAK_DEBUG
 static const char mem_debug_file[] ICACHE_RODATA_ATTR = __FILE__;
 #endif
diff --git a/lwip/core/dhcp.c b/lwip/core/dhcp.c
index 342543e..5596cbf 100644
--- a/lwip/core/dhcp.c
+++ b/lwip/core/dhcp.c
@@ -84,6 +84,8 @@
 
 #include <string.h>
 
+extern void system_station_got_ip_set(ip_addr_t * ip_addr, ip_addr_t *sn_mask, ip_addr_t *gw_addr);
+
 #ifdef MEMLEAK_DEBUG
 static const char mem_debug_file[] ICACHE_RODATA_ATTR = __FILE__;
 #endif
diff --git a/lwip/core/ipv4/ip_addr.c b/lwip/core/ipv4/ip_addr.c
index 81db807..06f4d0d 100644
--- a/lwip/core/ipv4/ip_addr.c
+++ b/lwip/core/ipv4/ip_addr.c
@@ -40,6 +40,8 @@
 #include "lwip/ip_addr.h"
 #include "lwip/netif.h"
 
+extern int isdigit ( int c );
+
 /* used by IP_ADDR_ANY and IP_ADDR_BROADCAST in ip_addr.h */
 const ip_addr_t ip_addr_any ICACHE_RODATA_ATTR = { IPADDR_ANY };
 const ip_addr_t ip_addr_broadcast ICACHE_RODATA_ATTR = { IPADDR_BROADCAST };
diff --git a/lwip/core/tcp.c b/lwip/core/tcp.c
index ee50ceb..929801c 100644
--- a/lwip/core/tcp.c
+++ b/lwip/core/tcp.c
@@ -638,13 +638,9 @@ tcp_new_port(void)
   static u16_t port = TCP_LOCAL_PORT_RANGE_START;
   
  again:
-//  if (++port >= TCP_LOCAL_PORT_RANGE_END) {
-//    port = TCP_LOCAL_PORT_RANGE_START;
-//  }
-  port = os_random();
-  port %= TCP_LOCAL_PORT_RANGE_END;
-  if (port < TCP_LOCAL_PORT_RANGE_START)
-	  port += TCP_LOCAL_PORT_RANGE_START;
+
+  port = TCP_LOCAL_PORT_RANGE_START + os_random()%(TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START);
+
   /* Check all PCB lists. */
   for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {  
     for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
@@ -1424,9 +1420,13 @@ tcp_pcb_purge(struct tcp_pcb *pcb)
     }
     if (pcb->unsent != NULL) {
       LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: not all data sent\n"));
+      tcp_segs_free(pcb->unsent);
+      pcb->unsent = NULL;
     }
     if (pcb->unacked != NULL) {
       LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
+      tcp_segs_free(pcb->unacked);
+      pcb->unacked = NULL;
     }
 #if TCP_QUEUE_OOSEQ
     if (pcb->ooseq != NULL) {
@@ -1440,9 +1440,6 @@ tcp_pcb_purge(struct tcp_pcb *pcb)
        queue if it fires */
     pcb->rtime = -1;
 
-    tcp_segs_free(pcb->unsent);
-    tcp_segs_free(pcb->unacked);
-    pcb->unacked = pcb->unsent = NULL;
 #if TCP_OVERSIZE
     pcb->unsent_oversize = 0;
 #endif /* TCP_OVERSIZE */
